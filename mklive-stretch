#!/bin/bash

# fredx181 2017-07-31, 'MakeLive' for Stretch (Debian 9), creates a minimal live system
# with aufs support and porteus-boot style included
# 2017-08-05, fixed support for Jessie host (previously worked only from Stretch)
# and removed install of linux-headers and aufs-dkms (build time gets shorter)
# instead copy aufs.ko for kernel 4.9.3 to /lib/modules/<kernel_version>/kernel/fs/aufs
# and execute "depmod <kernel_version>" and create new initrd.img-<kernel_version> in /boot

##### Install packages in chroot, MODIFY BELOW AS DESIRED #####
##### Having duplicate packages in the different sections below is not a problem
##### apt-get will skip them, without error

export BASE_INSTALL="live-boot wget net-tools ifupdown wireless-tools sysvinit-core xserver-xorg-core xserver-xorg psmisc fuse x11-utils x11-xserver-utils dbus-x11 busybox sudo mawk xinit xterm pciutils usbutils file rsync dosfstools"

export BASE_APPS_INSTALL="openbox obconf menu leafpad pcmanfm lxpanel gparted parted pv synaptic volumeicon-alsa alsa-utils viewnior firefox-esr=24.8.0esr-1~deb8u2 pm-utils xdotool wmctrl desktop-file-utils mime-support cryptsetup-bin squashfs-tools conky lxrandr lxinput lxappearance fakeroot xserver-xorg-input-evdev pfind"

export BASE_DOG_APPS_INSTALL="yad gtkdialog obshutdown pup-volume-monitor peasywifi edit-sfs-pcmanfm filemnt-pcmanfm remaster-scripts quick-remaster apt2sfs sfsload fixdepinstall greybird-theme-dd-stretch makedebpackage flashplayerchoice"

# Add firmware packages as desired, separated by a space 
export FIRMWARE="firmware-linux-free" 
##### Below a selection of firmware packages available (mostly for wireless) #####  
##### atmel-firmware firmware-realtek bluez-firmware firmware-atheros firmware-linux-free firmware-linux-nonfree firmware-netxen firmware-ti-connectivity firmware-b43legacy-installer firmware-iwlwifi firmware-ipw2x00 firmware-libertas firmware-intelwimax firmware-brcm80211 firmware-b43-installer firmware-qlogic firmware-bnx2 firmware-misc-nonfree firmware-bnx2x firmware-zd1211
#######################################################

# Uncomment for dog-extras (random selection for now, more available)
# export EXTRA_DOG_APPS_INSTALL="debdoginstallscripts dogradio youtube-get2 youtube-viewer peasyfwmon gifondesktop upgrade-kernel conkyclock redshiftgui"

########### End of user input for install choices ###########

############################ Remove locales ? #################################
export REMOVE_LOCALES="yes" # SET to "no" if you want to keep locale files in /usr/share/locale
###### Note about removing (e.g.libllvm3.9) and extra apt-get commands: ###########
export APTGET_EXTRA="yes" # set to "no" if you don't want
# Further in script the (big) library 'libllvm3.9' and gnome-icon-theme will be uninstalled to keep ISO size small as possible
### depending on if/how you edited the installed packages variables on top of the script
### it may uninstall some packages not desired, set above to APTGET_EXTRA="no" then
### Find the line with 'Extra apt-get' further in the script (more can be adjusted)
##########################################################


######### Start #########

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
echo "Please run again, e.g. 'sudo ./mklive-stretch', exiting now..."
sleep 3
exit
fi

echo
echo -e "\e[0;33mCreate a Debian 9 (Stretch) minimal live system similar to 'DebianDog'\nWith aufs support and porteus-boot style included\n\nIt's required to have at least 3 GB free space\nand to run this script on a Linux filesystem, e.g. ext4\033[0m"

if [ "$(uname -m)" = "i686" ]; then
echo
echo -e "\e[0;32mOK, running 32-bit OS, building live system for 32-bit: $(uname -m)\033[0m"
export ARCH="i386"
elif [ "$(uname -m)" = "x86_64" ]; then
echo
echo -e "\e[0;32mOK, running 64-bit OS, building live system for 64-bit: $(uname -m)\033[0m"
export ARCH="amd64"
fi
echo -e "\e[0;32mBuilding will be done in: $PWD/stretch\033[0m"
read -sp "Press ENTER to continue . . . "
echo
echo

echo -e "\e[0;36mChecking network connection...\033[0m"
if ping -c1 google.com 2>&1 | grep unknown; then 
echo -e "\e[0;33mThere is no network connection. Cannot continue, exiting...\033[0m"
sleep 3
exit
else
echo -e "\e[0;32mOK\033[0m"
sleep 1
fi

# This makes sure when the script is interrupted, that all mount 'binds' will unmount 
exitfn () {
    trap SIGINT              # Resore signal handling for SIGINT
echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount chroot/tmp
umount chroot/proc 2> /dev/null
umount chroot/dev/pts 2> /dev/null
umount chroot/dev 2> /dev/null
umount chroot/sys 2> /dev/null
sleep 2
rm -rf chroot
echo -e "\e[0;36mRemoved chroot\033[0m"
   if [ "$?" -ne "0" ]; then
   echo -e "\e[0;31mSomething went wrong, directory chroot cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   fi
exit 0
}
export -f exitfn

trap "exitfn" 1 2 15           # Set up SIGINT trap to call function 'exitfn'

if [ -d "stretch" ]; then 
echo -e "\e[0;33m Working directory 'stretch' already exists \n To be able to continue, it needs to be removed first\n All files inside will be deleted \033[0m"
read -p "Are you sure to delete directory stretch ? (Enter=yes) (Y/n)?" choice

case "$choice" in 
  y|Y|"")

echo -e "\e[0;36mUnmount mount binds and remove stretch/chroot...\033[0m"
#umount chroot/tmp
umount stretch/chroot/proc 2> /dev/null
umount stretch/chroot/dev/pts 2> /dev/null
umount stretch/chroot/dev 2> /dev/null
umount stretch/chroot/sys 2> /dev/null
rm -rf stretch/chroot
rm -rf stretch
   if [ "$?" -ne "0" ]; then
   echo -e "\e[0;31mSomething went wrong, directory stretch cannot be removed\033[0m"
   echo -e "\e[0;31mMake sure it's not in use by some process and try again, exiting...\033[0m"
   sleep 2
   exit
   fi

echo -e "\e[0;32mOK, removed directory stretch and will continue...\033[0m"
;;
  n|N)
echo "Exiting..."
sleep 3
exit 0
;;
*)
echo -e "\e[0;31mNot a valid choice, exiting....\033[0m"
sleep 3
exit 0
;;
esac
fi

if [ $(command -v apt-get 2>/dev/null) ];then
 echo -e "\e[0;36mUpdate the package lists...\033[0m"
 apt-get update
 echo -e "\e[0;36mInstall some required packages, e.g. debootstrap, squashfs-tools, etc...\033[0m"
 apt-get install debootstrap wget xorriso isolinux xz-utils squashfs-tools -y --force-yes
 [ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
fi

########## Set up debootstrap ##########
echo -e "\e[0;36mSetting up debootstrap in stretch/chroot\033[0m"
echo -e "\e[0;36mThis may take a while...\033[0m"
mkdir -p stretch/chroot && cd stretch &&
debootstrap --arch=$ARCH --variant=minbase stretch chroot http://ftp.us.debian.org/debian/

echo -e "\e[0;36mDownload required archives containing scripts, initrd-skel, etc...\033[0m"
sleep 3
wget --no-check-certificate https://raw.githubusercontent.com/DebianDog/MakeLive/gh-pages/dog-boot-stretch.tar.gz
wget --no-check-certificate https://raw.githubusercontent.com/DebianDog/MakeLive/gh-pages/initrdport-stretch.tar.gz
wget --no-check-certificate https://raw.githubusercontent.com/DebianDog/MakeLive/gh-pages/isodata-stretch.tar.gz
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"

echo -e "\e[0;36mExtracting...\033[0m"
tar -zxvf dog-boot-stretch.tar.gz
tar -zxvf isodata-stretch.tar.gz
tar -zxvf initrdport-stretch.tar.gz
echo -e "\e[0;36mCopy scripts, required for porteus-boot, to the chroot...\033[0m"
cp -af dog-boot-stretch/* chroot/
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"

# mount bind some required directories from host filesystem
mount --bind /proc chroot/proc
#mount --bind /tmp chroot/tmp
mount --bind /dev chroot/dev
mount --bind /sys chroot/sys
mount -t devpts devpts chroot/dev/pts
# provide a network connection in chroot
echo -en "`cat /etc/resolv.conf`" > chroot/etc/resolv.conf

#################################################
############ Start running in chroot ############
#################################################
chroot_in () {
if [ -z $(which apt-get) ]; then
echo -e "\e[0;31mSorry, apt-get not found, cannot continue\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
fi 
export HOME=/root
export LC_ALL=C
apt-get update
echo "APT::Install-Recommends "false"; APT::Install-Suggests "false";" > /etc/apt/apt.conf
sleep 1
apt-get install dialog dbus ca-certificates apt-transport-https --yes --force-yes
dbus-uuidgen > /var/lib/dbus/machine-id
echo "live" > /etc/hostname
echo "127.0.0.1	 localhost" > /etc/hosts
echo "127.0.1.1	 live" >> /etc/hosts
mkdir /live
mkdir -p /opt/bin

update-rc.d snapexit defaults

# make /bin/sh symlink to bash instead of dash:
echo -e "\e[0;36mmake /bin/sh symlink to bash instead of default dash\033[0m"
echo "dash dash/sh boolean false" | debconf-set-selections
DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

if [ "$ARCH" = "i386" ]; then
sed -i '1 s|^|deb https://fredx181.github.io/StretchDog/i386/Packages/ ./\n|' /etc/apt/sources.list
apt-get update # required, dog repository just added to sources.list
# simulate install first to check for errors, if there are, exit
echo -e "\e[0;36mChecking packages . . .\033[0m"
apt-get install -s -y --force-yes $BASE_INSTALL $BASE_APPS_INSTALL $BASE_DOG_APPS_INSTALL $EXTRA_DOG_APPS_INSTALL $FIRMWARE
ret=$?
if [[ $ret -eq 100 ]]; then
echo -e "\e[0;31mSorry, there are one or more errors, see above.\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
fi
echo -e "\e[0;36mInstall linux-image-4.9.0-3-686-pae\033[0m"
sleep 3
apt-get install --yes linux-image-4.9.0-3-686-pae

elif [ "$ARCH" = "amd64" ]; then
sed -i '1 s|^|deb https://fredx181.github.io/StretchDog/amd64/Packages/ ./\n|' /etc/apt/sources.list
apt-get update # required, dog repository just added to sources.list
# simulate install first to check for errors, if there are, exit
echo -e "\e[0;36mChecking packages . . .\033[0m"
apt-get install -s -y --force-yes $BASE_INSTALL $BASE_APPS_INSTALL $BASE_DOG_APPS_INSTALL $EXTRA_DOG_APPS_INSTALL $FIRMWARE
ret=$?
if [[ $ret -eq 100 ]]; then
echo -e "\e[0;31mSorry, there are one or more errors, see above.\033[0m"
echo -e "\e[0;36mExiting . . .\033[0m"
touch /exit_
sleep 3
exit
fi
echo -e "\e[0;36mInstall linux-image-4.9.0-3-amd64\033[0m"
sleep 3
apt-get install --yes linux-image-4.9.0-3-amd64
fi

# check kernel version just installed in chroot, output of VERNEWKERNEL will be used later 
VERNEWKERNEL=$(grep " install " /var/log/dpkg.log | sort -r |  cut -d " " -sf4 | grep -o "^[^:]*" | grep linux-image | head -n 1 | sed -e 's/linux-image-//')

####### Start installing packages, defined on top of this script #######
echo -e "\e[0;36mInstall more packages, e.g. required for network connection\033[0m"
echo -e "\e[0;36mand e.g. openbox, synaptic, xserver-xorg, busybox, etc... \033[0m"
sleep 3
# If one of the variables is commented out (on top of this script), it will be skipped
apt-get install --no-install-recommends --yes $BASE_INSTALL $BASE_APPS_INSTALL $BASE_DOG_APPS_INSTALL $EXTRA_DOG_APPS_INSTALL $FIRMWARE
############ End of installing ############

echo -e "\e[0;36mCopy aufs and squashfs (LZ4 support) module\033[0m"
sleep 3
if [ "$ARCH" = "i386" ]; then
mv -f /lib/aufs32 /lib/modules/$VERNEWKERNEL/kernel/fs/aufs
rm -rf /lib/aufs64
mv -f /lib/squashfs32 /lib/modules/$VERNEWKERNEL/kernel/fs/squashfs
rm -rf /lib/squashfs64
depmod $VERNEWKERNEL

elif [ "$ARCH" = "amd64" ]; then
mv -f /lib/aufs64 /lib/modules/$VERNEWKERNEL/kernel/fs/aufs
rm -rf /lib/aufs32
mv -f /lib/squashfs64 /lib/modules/$VERNEWKERNEL/kernel/fs/squashfs
rm -rf /lib/squashfs32
depmod $VERNEWKERNEL
fi

ln -s /dev/null /etc/systemd/network/99-default.link # traditional network interface names

# create new initrd with aufs and new squashfs (lz4) included
CRYPTSETUP=Y update-initramfs -t -c -k $VERNEWKERNEL

##### Extra apt-get #####
### libllvm3.9 takes a lot of space, uninstall it to keep ISO size small as possible
if [ "$APTGET_EXTRA" = "yes" ]; then # if set to yes on top of script 
apt-get purge --yes libllvm3.9 # in case installed
apt-get purge --yes gnome-icon-theme # uncomment if not desired to remove
# if "xserver-xorg-input-evdev" is installed:
# apt-get purge --yes  xserver-xorg-input-libinput # uncomment if lxinput doesn't work
fi
apt-get --yes --force-yes autoremove
#####################################

echo "Cleaning..."
rm -f var/lib/alsa/asound.state
rm -f root/.bash_history
rm -f root/.xsession-errors
rm -rf root/.cache
rm -rf root/.thumbnails
rm -f etc/blkid-cache
rm -f var/lib/dhcp/dhclient.eth0.leases
rm -f var/lib/dhcpcd/*.lease
rm -rf lib/consolefonts
rm -rf lib/keymaps
rm -fr var/lib/aptitude/*
ls var/lib/apt/lists | grep -v "lock" | grep -v "partial" | xargs -i rm var/lib/apt/lists/{} ;
rm -f var/cache/debconf/*-old

find usr/share/doc -type f -exec rm -f {} \;
find usr/share/man -type f -exec rm -f {} \;
find usr/share/gtk-doc -type f -exec rm -f {} \;
find usr/share/info -type f -exec rm -f {} \;
    chown -R man:root usr/share/man

rm -f vmlinuz* initrd* # remove symlinks on /
[ "$REMOVE_LOCALES" = "yes" ] && rm -fr usr/share/locale/*
echo
echo -e "\e[0;36mPlease set the password for 'root'\033[0m" 
passwd root

rm -f /var/lib/dbus/machine-id
apt-get clean
rm -rf /tmp/*
rm /etc/resolv.conf
mv -f /usr/local/XTerm /etc/X11/app-defaults/
}
export -f chroot_in

chroot chroot /bin/bash -c chroot_in

# do not continue if there were errors
[ -f "chroot/exit_" ] && exitfn

################################################
############ End running in chroot #############
################################################

echo -e "\e[0;36mUnmounting mount binds in chroot\033[0m"
#umount chroot/tmp
umount chroot/proc
umount chroot/dev/pts
umount chroot/dev
umount chroot/sys

echo -e "\e[0;36mStart extracting and creating new 'live' initrd files...\033[0m"
sleep 3
mkdir initrdlive
mv -f chroot/boot/initrd.img-* initrdlive/initrd.img
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
cd initrdlive
zcat initrd.img | cpio -i -d
rm -f initrd.img
echo -e "\e[0;36mCreating initrd.img, please wait...\033[0m"
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > ../initrd.img
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
cd ..
echo -e "\e[0;36mCopy kernel modules, contents of lib/modules, from extracted 'live-boot' initrd\n to extracted 'porteus-boot' initrd skeleton, initrdport/lib/modules/ ...\033[0m"
sleep 2 
echo
cp -a initrdlive/lib/modules/* initrdport/lib/modules/
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
echo -e "\e[0;36mCreating initrd1.xz, please wait...\033[0m"
cd initrdport
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > ../initrd1.xz
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
cd ..
echo -e "\e[0;36mCopy initrd.img, initrd1.xz to isodata/live...\033[0m"
mv -f initrd.img isodata/live/
mv -f initrd1.xz isodata/live/
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
echo -e "\e[0;36mMove vmlinuz, from chroot/boot/, to isodata/live/vmlinuz1 ...\033[0m"
mv -f chroot/boot/vmlinuz-* isodata/live/vmlinuz1
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"


rm -f chroot/boot/System.map*
rm -f isodata/live/01-filesystem.squashfs 

echo -e "\e[0;33mNow we will create compressed filesystem: '01-filesystem.squashfs'\nPlease enter your choice, xz compression will give smaller size than gzip, but xz takes much longer time to compress\033[0m"
read -p "Type gzip or xz : " choice

case "$choice" in 
  gzip)
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs
;;
  xz)
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs -comp xz -b 512k
;;
*)
echo -e "\e[0;31mNot a valid choice, please try again, type: gzip or xz \033[0m"
sleep 1
TRYAGAIN=yes
;;
esac

if [ "$TRYAGAIN" = "yes" ]; then
### Second chance in case having made a typo
read -p "Type gzip or xz : " choice

case "$choice" in 
  gzip)
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs
;;
  xz)
echo -e "\e[0;36mCreating isodata/live/01-filesystem.squashfs...\033[0m"
mksquashfs chroot isodata/live/01-filesystem.squashfs -comp xz -b 512k
;;
*)
echo -e "\e[0;31mNot a valid choice, exiting now... \033[0m"
sleep 1

exit 0
;;
esac
fi
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo

echo -e "\e[0;36mFinally creating ISO...\033[0m"
NEWISO=$PWD/isodata
LABEL=deblive
NAME=../DebLive_Stretch-$ARCH.iso

cd "$NEWISO"

xorriso -as mkisofs -r -J -joliet-long -l -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16 -V "$LABEL" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ${NAME} "$NEWISO"
cd ..
[ $? -eq 0 ] && echo -e "\e[0;32mOK\033[0m" || echo -e "\e[0;31mFAILED\033[0m"
echo
echo
echo -e "\e[0;32mFinished! If all went well, DebLive_Stretch-$ARCH.iso has been created. \nAlso the required files for a frugal install are in isodata 'live' folder \n\nHave a good day!\033[0m"
echo

exit 0


